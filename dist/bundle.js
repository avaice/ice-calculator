(()=>{"use strict";var e={855:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.parenthesis=r.calculate=void 0;const n=t(888);r.calculate=e=>{const t=(0,r.parenthesis)(e);if(["*","/","+","-"].forEach((e=>{for(let r=0;r<t.length;r++)if(t[r]===e){const s=(()=>{switch(e){case"+":return Number(t[r-1])+Number(t[r+1]);case"-":return Number(t[r-1])-Number(t[r+1]);case"*":return Number(t[r-1])*Number(t[r+1]);case"/":return Number(t[r-1])/Number(t[r+1]);default:throw new Error("calculateメソッドのforEachで演算子ではない値が指定された（プログラムのエラー）")}})();(0,n.checkIsNaN)({left:t[r-1],right:t[r+1]},s),t.splice(r-1,3),t.splice(r-1,0,s.toString())}})),1!==t.length)throw new Error(`計算しきれない式が指定された\n渡された式: ${e}\n計算結果: ${t}`);const s=Number(t[0]);if(isNaN(s))throw new Error(`計算結果がNumber型でなかった\n渡された式: ${e}\n計算結果: ${t}`);return s},r.parenthesis=e=>{const t=[...e];let n=null,s=null,l=null;for(let e=0;e<t.length;e++)if("("===t[e])l?l++:(l=1,n=e);else if(")"===t[e]){if("("===t[e-1])throw new Error("中身のない括弧がある\n"+t);if(null===l)throw new Error("始め括弧がないのに締め括弧がある\n"+t);if(l--,0===l){if(s=e,null===n)throw new Error("始め括弧がないのに締め括弧がある(startPointer未定義。プログラムのエラー)\n"+t);const l=t.splice(n+1,s-n-1);t.splice(n,2),t.splice(n,0,(0,r.calculate)(l).toString())}}return t}},577:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.parse=void 0;const n=t(888);r.parse=e=>{const r=(0,n.trim)(e),t=[];let s="";for(let e=0;e<r.length;e++)!isNaN(Number(r[e]))||"."===r[e]||"-"===r[e]&&0===e?(s+=r[e],(e+1===r.length||isNaN(Number(r[e+1]))&&"."!==r[e+1])&&(t.push(s),s="")):t.push(r[e]);return t}},888:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.checkIsNaN=r.trim=void 0,r.trim=e=>e.replace(/ /g,""),r.checkIsNaN=(e,r)=>{if(isNaN(r))throw new Error(`左辺または右辺が数値ではない\n${e.left} * ${e.right}`)}}},r={};function t(n){var s=r[n];if(void 0!==s)return s.exports;var l=r[n]={exports:{}};return e[n](l,l.exports,t),l.exports}(()=>{const e=t(855),r=t(577);window.parseAndCalc=t=>(0,e.calculate)((0,r.parse)(t))})()})();